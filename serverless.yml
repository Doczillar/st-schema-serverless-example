# For full config options, check the docs:
#    docs.serverless.com

service: st-schema-serverless-example
frameworkVersion: "3"

custom:
  myStage: ${sls:stage}
  myEnvironment:
    ${file(./serverless-env.yml)}

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    API_GATEWAY_ENDPOINT: "${self:custom.myEnvironment.API_GATEWAY_ENDPOINT.${self:custom.myStage}}"
    CLIENT_ID: "${self:custom.myEnvironment.CLIENT_ID.${self:custom.myStage}}"
    CLIENT_SECRET: "${self:custom.myEnvironment.CLIENT_SECRET.${self:custom.myStage}}"
    DYNAMODB_TABLE_NAME: "${self:custom.myEnvironment.DYNAMODB_TABLE_NAME.${self:custom.myStage}}"
    DYNAMODB_SESSION_TABLE_NAME: "${self:custom.myEnvironment.DYNAMODB_SESSION_TABLE_NAME.${self:custom.myStage}}"
    PERMITTED_REDIRECT_URLS: "${self:custom.myEnvironment.PERMITTED_REDIRECT_URLS.${self:custom.myStage}}"
    ST_CLIENT_ID: "${self:custom.myEnvironment.ST_CLIENT_ID.${self:custom.myStage}}"
    ST_CLIENT_SECRET: "${self:custom.myEnvironment.ST_CLIENT_SECRET.${self:custom.myStage}}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.myEnvironment.DYNAMODB_TABLE_NAME.${self:custom.myStage}}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.myEnvironment.DYNAMODB_TABLE_NAME.${self:custom.myStage}}/index/username-sk-index"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.myEnvironment.DYNAMODB_SESSION_TABLE_NAME.${self:custom.myStage}}"
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "arn:aws:execute-api:${opt:region, self:provider.region}:*:${opt:stage, self:provider.stage}-st-schema-websocket-example-websockets/${opt:stage, self:provider.stage}/*/*"

package:
  include:
    - lib/**
    - public/**
    - routes/**
    - views/**

resources:
  - Resources:
      MainTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: "${self:custom.myEnvironment.DYNAMODB_TABLE_NAME.${self:custom.myStage}}"
          AttributeDefinitions:
            - AttributeName: pk
              AttributeType: S
            - AttributeName: sk
              AttributeType: S
            - AttributeName: username
              AttributeType: S
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: sk
              KeyType: RANGE
          GlobalSecondaryIndexes:
            - IndexName: username-sk-index
              KeySchema:
                - AttributeName: username
                  KeyType: HASH
                - AttributeName: sk
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      SessionTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: "${self:custom.myEnvironment.DYNAMODB_SESSION_TABLE_NAME.${self:custom.myStage}}"
          AttributeDefinitions:
            - AttributeName: sessionId
              AttributeType: S
          KeySchema:
            - AttributeName: sessionId
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST

functions:
  connect:
    handler: handler.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: handler.disconnect
    events:
      - websocket:
          route: $disconnect
  schema:
    handler: handler.schema
  website:
    handler: handler.website
    url: true

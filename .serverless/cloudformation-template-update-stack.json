{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ConnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/st-schema-serverless-example-dev-connect"
      }
    },
    "DisconnectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/st-schema-serverless-example-dev-disconnect"
      }
    },
    "SchemaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/st-schema-serverless-example-dev-schema"
      }
    },
    "WebsiteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/st-schema-serverless-example-dev-website"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "st-schema-serverless-example",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/st-schema-serverless-example-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/st-schema-serverless-example-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:CreateTable",
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/st-schema-websocket-example"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:CreateTable",
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/st-schema-websocket-example/index/username-sk-index"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:CreateTable",
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/st-schema-websocket-example-sessions"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:Invoke"
                  ],
                  "Resource": "arn:aws:execute-api:us-east-1:*:dev-st-schema-websocket-example-websockets/dev/*/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "st-schema-serverless-example",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ConnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/st-schema-serverless-example/dev/1692132851126-2023-08-15T20:54:11.126Z/st-schema-serverless-example.zip"
        },
        "Handler": "handler.connect",
        "Runtime": "nodejs18.x",
        "FunctionName": "st-schema-serverless-example-dev-connect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "API_GATEWAY_ENDPOINT": "gtpc5kh4u1.execute-api.us-east-1.amazonaws.com/dev",
            "CLIENT_ID": "a4a278fd-0ac1-47d9-b93a-987e3f401015",
            "CLIENT_SECRET": "830c120e-a791-453c-94b7-302fea58a823",
            "DYNAMODB_TABLE_NAME": "st-schema-websocket-example",
            "DYNAMODB_SESSION_TABLE_NAME": "st-schema-websocket-example-sessions",
            "PERMITTED_REDIRECT_URLS": "https://c2c-us.smartthings.com/oauth/callback,https://c2c-eu.smartthings.com/oauth/callback,https://c2c-ap.smartthings.com/oauth/callback",
            "ST_CLIENT_ID": "75462baa-bbe2-4bc6-9408-00c1ad048210",
            "ST_CLIENT_SECRET": "096292822ce8c1624d9151613106caa947eaca88cdabf085aa0f7c358ebf363ff76a85e55c75e6a68b7f0c42e10b121b3fca2141ce2ed869989d669b3d3f823838a7928b25e587703b0826fb4c03c1e0cf061992a2e9c274dbeef8d909c9518a4046b36c32ab7e4db512c8f99d2cceeed715267760b5a97e8805e8989b10047dca614e7b587830c8a93e74559cdb33d8c4ad76b2ad714f75abb3b6fd56f6d6c0547e2d53c5ee0a6dbdf08541171c44ab6d1fbb650c389aa0896cf32a9deac8f49ad3bb735aac62e97f7de885467f8e9ccc2f42e68379c8fed9db58df2b3b0807bb56c4c51761dcd4d561031e415e2d3e1765f1d4d477877dbd2862397bc29cd9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConnectLogGroup"
      ]
    },
    "DisconnectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/st-schema-serverless-example/dev/1692132851126-2023-08-15T20:54:11.126Z/st-schema-serverless-example.zip"
        },
        "Handler": "handler.disconnect",
        "Runtime": "nodejs18.x",
        "FunctionName": "st-schema-serverless-example-dev-disconnect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "API_GATEWAY_ENDPOINT": "gtpc5kh4u1.execute-api.us-east-1.amazonaws.com/dev",
            "CLIENT_ID": "a4a278fd-0ac1-47d9-b93a-987e3f401015",
            "CLIENT_SECRET": "830c120e-a791-453c-94b7-302fea58a823",
            "DYNAMODB_TABLE_NAME": "st-schema-websocket-example",
            "DYNAMODB_SESSION_TABLE_NAME": "st-schema-websocket-example-sessions",
            "PERMITTED_REDIRECT_URLS": "https://c2c-us.smartthings.com/oauth/callback,https://c2c-eu.smartthings.com/oauth/callback,https://c2c-ap.smartthings.com/oauth/callback",
            "ST_CLIENT_ID": "75462baa-bbe2-4bc6-9408-00c1ad048210",
            "ST_CLIENT_SECRET": "096292822ce8c1624d9151613106caa947eaca88cdabf085aa0f7c358ebf363ff76a85e55c75e6a68b7f0c42e10b121b3fca2141ce2ed869989d669b3d3f823838a7928b25e587703b0826fb4c03c1e0cf061992a2e9c274dbeef8d909c9518a4046b36c32ab7e4db512c8f99d2cceeed715267760b5a97e8805e8989b10047dca614e7b587830c8a93e74559cdb33d8c4ad76b2ad714f75abb3b6fd56f6d6c0547e2d53c5ee0a6dbdf08541171c44ab6d1fbb650c389aa0896cf32a9deac8f49ad3bb735aac62e97f7de885467f8e9ccc2f42e68379c8fed9db58df2b3b0807bb56c4c51761dcd4d561031e415e2d3e1765f1d4d477877dbd2862397bc29cd9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DisconnectLogGroup"
      ]
    },
    "SchemaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/st-schema-serverless-example/dev/1692132851126-2023-08-15T20:54:11.126Z/st-schema-serverless-example.zip"
        },
        "Handler": "handler.schema",
        "Runtime": "nodejs18.x",
        "FunctionName": "st-schema-serverless-example-dev-schema",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "API_GATEWAY_ENDPOINT": "gtpc5kh4u1.execute-api.us-east-1.amazonaws.com/dev",
            "CLIENT_ID": "a4a278fd-0ac1-47d9-b93a-987e3f401015",
            "CLIENT_SECRET": "830c120e-a791-453c-94b7-302fea58a823",
            "DYNAMODB_TABLE_NAME": "st-schema-websocket-example",
            "DYNAMODB_SESSION_TABLE_NAME": "st-schema-websocket-example-sessions",
            "PERMITTED_REDIRECT_URLS": "https://c2c-us.smartthings.com/oauth/callback,https://c2c-eu.smartthings.com/oauth/callback,https://c2c-ap.smartthings.com/oauth/callback",
            "ST_CLIENT_ID": "75462baa-bbe2-4bc6-9408-00c1ad048210",
            "ST_CLIENT_SECRET": "096292822ce8c1624d9151613106caa947eaca88cdabf085aa0f7c358ebf363ff76a85e55c75e6a68b7f0c42e10b121b3fca2141ce2ed869989d669b3d3f823838a7928b25e587703b0826fb4c03c1e0cf061992a2e9c274dbeef8d909c9518a4046b36c32ab7e4db512c8f99d2cceeed715267760b5a97e8805e8989b10047dca614e7b587830c8a93e74559cdb33d8c4ad76b2ad714f75abb3b6fd56f6d6c0547e2d53c5ee0a6dbdf08541171c44ab6d1fbb650c389aa0896cf32a9deac8f49ad3bb735aac62e97f7de885467f8e9ccc2f42e68379c8fed9db58df2b3b0807bb56c4c51761dcd4d561031e415e2d3e1765f1d4d477877dbd2862397bc29cd9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SchemaLogGroup"
      ]
    },
    "WebsiteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/st-schema-serverless-example/dev/1692132851126-2023-08-15T20:54:11.126Z/st-schema-serverless-example.zip"
        },
        "Handler": "handler.website",
        "Runtime": "nodejs18.x",
        "FunctionName": "st-schema-serverless-example-dev-website",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "API_GATEWAY_ENDPOINT": "gtpc5kh4u1.execute-api.us-east-1.amazonaws.com/dev",
            "CLIENT_ID": "a4a278fd-0ac1-47d9-b93a-987e3f401015",
            "CLIENT_SECRET": "830c120e-a791-453c-94b7-302fea58a823",
            "DYNAMODB_TABLE_NAME": "st-schema-websocket-example",
            "DYNAMODB_SESSION_TABLE_NAME": "st-schema-websocket-example-sessions",
            "PERMITTED_REDIRECT_URLS": "https://c2c-us.smartthings.com/oauth/callback,https://c2c-eu.smartthings.com/oauth/callback,https://c2c-ap.smartthings.com/oauth/callback",
            "ST_CLIENT_ID": "75462baa-bbe2-4bc6-9408-00c1ad048210",
            "ST_CLIENT_SECRET": "096292822ce8c1624d9151613106caa947eaca88cdabf085aa0f7c358ebf363ff76a85e55c75e6a68b7f0c42e10b121b3fca2141ce2ed869989d669b3d3f823838a7928b25e587703b0826fb4c03c1e0cf061992a2e9c274dbeef8d909c9518a4046b36c32ab7e4db512c8f99d2cceeed715267760b5a97e8805e8989b10047dca614e7b587830c8a93e74559cdb33d8c4ad76b2ad714f75abb3b6fd56f6d6c0547e2d53c5ee0a6dbdf08541171c44ab6d1fbb650c389aa0896cf32a9deac8f49ad3bb735aac62e97f7de885467f8e9ccc2f42e68379c8fed9db58df2b3b0807bb56c4c51761dcd4d561031e415e2d3e1765f1d4d477877dbd2862397bc29cd9"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WebsiteLogGroup"
      ]
    },
    "ConnectLambdaVersioniESSmuUXay7nLCoNwZnW4DK9vsUzEr5CsXRzx54fR8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConnectLambdaFunction"
        },
        "CodeSha256": "ebU2zaVYVt67sdaNVi+C3+MlZe8fdYnrbddzjNURsR8="
      }
    },
    "DisconnectLambdaVersiontQMykyHAm2zV6Vj7T6bi7fMUwIBSN9GaIzyaZ1gM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DisconnectLambdaFunction"
        },
        "CodeSha256": "ebU2zaVYVt67sdaNVi+C3+MlZe8fdYnrbddzjNURsR8="
      }
    },
    "SchemaLambdaVersiontHFuBBdA8DRHgNV3XAgBGBNGvTHvBx8awlXaSj7kDU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SchemaLambdaFunction"
        },
        "CodeSha256": "ebU2zaVYVt67sdaNVi+C3+MlZe8fdYnrbddzjNURsR8="
      }
    },
    "WebsiteLambdaVersionjuKWT2rWMxeM1NXuXB9CkOMISOIMrCdmxE6ssc0fLsw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WebsiteLambdaFunction"
        },
        "CodeSha256": "ebU2zaVYVt67sdaNVi+C3+MlZe8fdYnrbddzjNURsR8="
      }
    },
    "WebsiteLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "WebsiteLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "WebsiteLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WebsiteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "WebsocketsApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-st-schema-serverless-example-websockets",
        "RouteSelectionExpression": "$request.body.action",
        "Description": "Serverless Websockets",
        "ProtocolType": "WEBSOCKET"
      }
    },
    "ConnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "ConnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "DisconnectWebsocketsIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "DisconnectLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "ConnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "ConnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "DisconnectLambdaPermissionWebsockets": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "WebsocketsApi",
        "DisconnectLambdaFunction"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DisconnectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "SconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "ConnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "SdisconnectWebsocketsRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "DisconnectWebsocketsIntegration"
              }
            ]
          ]
        }
      }
    },
    "WebsocketsDeploymentStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "StageName": "dev",
        "Description": "Serverless Websockets",
        "DeploymentId": {
          "Ref": "WebsocketsDeploymenttQrRaeKBVHmKj7TBiJLZtPEJpGrNGh1tq9c8ILaVn4"
        }
      }
    },
    "WebsocketsDeploymenttQrRaeKBVHmKj7TBiJLZtPEJpGrNGh1tq9c8ILaVn4": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": [
        "SconnectWebsocketsRoute",
        "SdisconnectWebsocketsRoute"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "WebsocketsApi"
        },
        "Description": "Serverless Websockets"
      }
    },
    "MainTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "st-schema-websocket-example",
        "AttributeDefinitions": [
          {
            "AttributeName": "pk",
            "AttributeType": "S"
          },
          {
            "AttributeName": "sk",
            "AttributeType": "S"
          },
          {
            "AttributeName": "username",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "pk",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "sk",
            "KeyType": "RANGE"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "username-sk-index",
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "sk",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "SessionTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "st-schema-websocket-example-sessions",
        "AttributeDefinitions": [
          {
            "AttributeName": "sessionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "sessionId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-ServerlessDeploymentBucketName"
      }
    },
    "ConnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConnectLambdaVersioniESSmuUXay7nLCoNwZnW4DK9vsUzEr5CsXRzx54fR8"
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-ConnectLambdaFunctionQualifiedArn"
      }
    },
    "DisconnectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DisconnectLambdaVersiontQMykyHAm2zV6Vj7T6bi7fMUwIBSN9GaIzyaZ1gM"
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-DisconnectLambdaFunctionQualifiedArn"
      }
    },
    "SchemaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SchemaLambdaVersiontHFuBBdA8DRHgNV3XAgBGBNGvTHvBx8awlXaSj7kDU"
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-SchemaLambdaFunctionQualifiedArn"
      }
    },
    "WebsiteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WebsiteLambdaVersionjuKWT2rWMxeM1NXuXB9CkOMISOIMrCdmxE6ssc0fLsw"
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-WebsiteLambdaFunctionQualifiedArn"
      }
    },
    "WebsiteLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "WebsiteLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-WebsiteLambdaFunctionUrl"
      }
    },
    "ServiceEndpointWebsocket": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "WebsocketsApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-st-schema-serverless-example-dev-ServiceEndpointWebsocket"
      }
    }
  }
}